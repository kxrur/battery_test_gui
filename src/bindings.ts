
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async insertBatteryLog(logData: BatteryLog) : Promise<Result<BatteryLog, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("insert_battery_log", { logData }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async exportCsv(basePath: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("export_csv", { basePath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async parseLog(onEvent: TAURI_CHANNEL<BatteryLog>) : Promise<void> {
    await TAURI_INVOKE("parse_log", { onEvent });
},
async getAllBatteryLogs() : Promise<Result<BatteryLog[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_all_battery_logs") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async commandRequest(command: Command, portNum: string) : Promise<Result<number[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("command_request", { command, portNum }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async detectSerialPorts() : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("detect_serial_ports") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async populateFakeData() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("populate_fake_data") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getAllTests() : Promise<Result<Test[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_all_tests") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getBatteryLogsForTest(targetTestId: number) : Promise<Result<BatteryLog[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_battery_logs_for_test", { targetTestId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async insertTest(test: Test) : Promise<Result<Test, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("insert_test", { test }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteTest(targetTestId: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_test", { targetTestId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async insertNewTest() : Promise<Result<Test, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("insert_new_test") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type BatteryLog = { record_id: number | null; id: number; port: string; battery_temperature: number; bench_temperature_mosfet: number; bench_temperature_resistor: number; load: number; voltage: number; current: number; state: string; status: string; start_date: string | null; end_date: string | null; test_id: number }
export type Command = "Ping" | "AssignId" | "RequestData" | "SetCharge" | "SetDischarge" | "SetStandBy" | "RequestCompletion"
export type TAURI_CHANNEL<TSend> = null
export type Test = { test_id: number | null; test_name: string; start_date: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
